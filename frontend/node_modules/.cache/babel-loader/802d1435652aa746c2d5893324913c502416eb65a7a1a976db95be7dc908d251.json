{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nexport const fetchTransactions = async params => {\n  if (!params || !params.month) {\n    // Check if month is part of the params\n    console.error(\"Month is required for fetching transactions.\");\n    throw new Error(\"Month is required\"); // Prevent making the request\n  }\n  try {\n    const response = await axios.get(`${API_URL}/transactions`, {\n      params\n    });\n    return response.data; // Adjust based on the actual API response structure\n  } catch (error) {\n    if (error.response) {\n      console.error(\"Error fetching transactions:\", error.response.data);\n      throw new Error(error.response.data.message || \"Error fetching transactions\");\n    } else {\n      console.error(\"Error fetching transactions:\", error);\n      throw new Error(\"Error fetching transactions: \" + error.message);\n    }\n  }\n};\nexport const fetchStatistics = async month => {\n  if (!month) {\n    // Check if month is provided\n    console.error(\"Month is required for fetching statistics.\");\n    throw new Error(\"Month is required\");\n  }\n  try {\n    const response = await axios.get(`${API_URL}/statistics`, {\n      params: {\n        month\n      }\n    });\n    return response.data; // Adjust based on the actual API response structure\n  } catch (error) {\n    if (error.response) {\n      console.error(\"Error fetching statistics:\", error.response.data);\n      throw new Error(error.response.data.message || \"Error fetching statistics\");\n    } else {\n      console.error(\"Error fetching statistics:\", error);\n      throw new Error(\"Error fetching statistics: \" + error.message);\n    }\n  }\n};\nexport const fetchBarChartData = async month => {\n  if (!month) {\n    console.error(\"Month is required for fetching bar chart data.\");\n    throw new Error(\"Month is required\");\n  }\n  try {\n    const response = await axios.get(`${API_URL}/bar-chart-data`, {\n      params: {\n        month\n      }\n    });\n    console.log(\"API response data:\", response.data);\n    return response.data; // Adjust based on the actual API response structure\n  } catch (error) {\n    if (error.response) {\n      console.error(\"Error fetching bar chart data:\", error.response.data);\n      throw new Error(error.response.data.message || \"Error fetching bar chart data\");\n    } else {\n      console.error(\"Error fetching bar chart data:\", error);\n      throw new Error(\"Error fetching bar chart data: \" + error.message);\n    }\n  }\n};","map":{"version":3,"names":["axios","API_URL","fetchTransactions","params","month","console","error","Error","response","get","data","message","fetchStatistics","fetchBarChartData","log"],"sources":["/home/stlt105/my-transaction-dashboard/frontend/src/api/TransactionsApi.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api';\n\nexport const fetchTransactions = async (params) => {\n    if (!params || !params.month) { // Check if month is part of the params\n        console.error(\"Month is required for fetching transactions.\");\n        throw new Error(\"Month is required\"); // Prevent making the request\n    }\n    \n    try {\n        const response = await axios.get(`${API_URL}/transactions`, { params });\n        return response.data; // Adjust based on the actual API response structure\n    } catch (error) {\n        if (error.response) {\n            console.error(\"Error fetching transactions:\", error.response.data);\n            throw new Error(error.response.data.message || \"Error fetching transactions\");\n        } else {\n            console.error(\"Error fetching transactions:\", error);\n            throw new Error(\"Error fetching transactions: \" + error.message);\n        }\n    }\n};\n\nexport const fetchStatistics = async (month) => {\n    if (!month) { // Check if month is provided\n        console.error(\"Month is required for fetching statistics.\");\n        throw new Error(\"Month is required\");\n    }\n\n    try {\n        const response = await axios.get(`${API_URL}/statistics`, { params: { month } });\n        return response.data; // Adjust based on the actual API response structure\n    } catch (error) {\n        if (error.response) {\n            console.error(\"Error fetching statistics:\", error.response.data);\n            throw new Error(error.response.data.message || \"Error fetching statistics\");\n        } else {\n            console.error(\"Error fetching statistics:\", error);\n            throw new Error(\"Error fetching statistics: \" + error.message);\n        }\n    }\n};\n\nexport const fetchBarChartData = async (month) => {\n    if (!month) {\n        console.error(\"Month is required for fetching bar chart data.\");\n        throw new Error(\"Month is required\");\n    }\n    \n    try {\n        const response = await axios.get(`${API_URL}/bar-chart-data`, { params: { month } });\n        console.log(\"API response data:\", response.data);\n        return response.data; // Adjust based on the actual API response structure\n    } catch (error) {\n        if (error.response) {\n            console.error(\"Error fetching bar chart data:\", error.response.data);\n            throw new Error(error.response.data.message || \"Error fetching bar chart data\");\n        } else {\n            console.error(\"Error fetching bar chart data:\", error);\n            throw new Error(\"Error fetching bar chart data: \" + error.message);\n        }\n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}