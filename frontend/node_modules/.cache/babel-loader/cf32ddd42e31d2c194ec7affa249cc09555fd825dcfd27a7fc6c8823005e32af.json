{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:5000/api';\nexport const fetchTransactions = async params => {\n  if (!params || Object.keys(params).length === 0) {\n    console.error(\"No parameters provided for fetching transactions.\");\n    throw new Error(\"No parameters provided\");\n  }\n  console.log(\"Fetching transactions with params:\", params);\n  try {\n    const response = await axios.get(`${API_URL}/transactions`, {\n      params\n    });\n    if (!response.data || typeof response.data !== 'object') {\n      console.error(\"Unexpected response structure:\", response.data);\n      throw new Error(\"Unexpected response structure\");\n    }\n    return response.data;\n  } catch (error) {\n    var _error$response;\n    console.error(\"Error fetching transactions:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw new Error(error.response.data.message || \"Error fetching transactions\");\n  }\n};\nexport const fetchStatistics = async month => {\n  if (!month) {\n    console.error(\"Month is required for fetching statistics.\");\n    throw new Error(\"Month is required\");\n  }\n  console.log(\"Fetching statistics for month:\", month);\n  try {\n    const response = await axios.get(`${API_URL}/transactions/statistics`, {\n      params: {\n        month\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response3, _error$response3$data;\n    console.error(\"Error fetching statistics:\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || \"Error fetching statistics\");\n  }\n};\nexport const fetchBarChartData = async month => {\n  if (!month) {\n    console.error(\"Month is required for fetching bar chart data.\");\n    throw new Error(\"Month is required\");\n  }\n  const monthIndex = isNaN(month) ? new Date(`1 ${month} 2021`).getMonth() + 1 : parseInt(month, 10);\n  if (isNaN(monthIndex) || monthIndex < 1 || monthIndex > 12) {\n    console.error(\"‚ùå Invalid month format:\", month);\n    throw new Error(\"Invalid month format\");\n  }\n  try {\n    console.log(\"üìå Fetching bar chart data for month:\", monthIndex);\n    const response = await axios.get(`${API_URL}/transactions/bar-chart`, {\n      params: {\n        month: monthIndex\n      }\n    });\n    console.log(\"API response data:\", response.data);\n    return response.data;\n  } catch (error) {\n    var _error$response4;\n    console.error(\"‚ùå Error fetching bar chart data:\", ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || error.message);\n    throw new Error(error.response.data.message || \"Error fetching bar chart data\");\n  }\n};","map":{"version":3,"names":["axios","API_URL","fetchTransactions","params","Object","keys","length","console","error","Error","log","response","get","data","_error$response","message","fetchStatistics","month","_error$response2","_error$response3","_error$response3$data","fetchBarChartData","monthIndex","isNaN","Date","getMonth","parseInt","_error$response4"],"sources":["/home/stlt105/my-transaction-dashboard/frontend/src/api/TransactionsApi.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:5000/api';\n\nexport const fetchTransactions = async (params) => {\n    if (!params || Object.keys(params).length === 0) {\n        console.error(\"No parameters provided for fetching transactions.\");\n        throw new Error(\"No parameters provided\"); \n    }\n\n    \n    console.log(\"Fetching transactions with params:\", params);\n\n    try {\n        const response = await axios.get(`${API_URL}/transactions`, { params });\n        \n       \n        if (!response.data || typeof response.data !== 'object') {\n            console.error(\"Unexpected response structure:\", response.data);\n            throw new Error(\"Unexpected response structure\");\n        }\n\n        return response.data; \n    } catch (error) {\n            console.error(\"Error fetching transactions:\", error.response?.data || error.message);\n            throw new Error(error.response.data.message || \"Error fetching transactions\");\n      \n    }\n};\n\n\nexport const fetchStatistics = async (month) => {\n    if (!month) {\n        console.error(\"Month is required for fetching statistics.\");\n        throw new Error(\"Month is required\");\n    }\n\n    console.log(\"Fetching statistics for month:\", month);\n    \n    try {\n        const response = await axios.get(`${API_URL}/transactions/statistics`, { params: { month } });\n        return response.data; \n    } catch (error) {\n        console.error(\"Error fetching statistics:\", error.response?.data || error.message);\n        throw new Error(error.response?.data?.message || \"Error fetching statistics\"); \n    }\n};\n\n\n\n\nexport const fetchBarChartData = async (month) => {\n    if (!month) {\n        console.error(\"Month is required for fetching bar chart data.\");\n        throw new Error(\"Month is required\");\n    }\n\n    const monthIndex = isNaN(month) \n    ? new Date(`1 ${month} 2021`).getMonth() + 1  \n    : parseInt(month, 10); \n\n    if (isNaN(monthIndex) || monthIndex < 1 || monthIndex > 12) {\n        console.error(\"‚ùå Invalid month format:\", month);\n        throw new Error(\"Invalid month format\");\n    }\n\n\n    try {\n        console.log(\"üìå Fetching bar chart data for month:\", monthIndex);\n        const response = await axios.get(`${API_URL}/transactions/bar-chart`, { params: { month: monthIndex } });\n        console.log(\"API response data:\", response.data);\n        return response.data;\n    } catch (error) {\n        console.error(\"‚ùå Error fetching bar chart data:\", error.response?.data || error.message);\n            throw new Error(error.response.data.message || \"Error fetching bar chart data\");\n        \n    }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}