{"ast":null,"code":"var _jsxFileName = \"/home/stlt105/my-transaction-dashboard/frontend/src/components/TransactionsBarChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { fetchBarChartData } from '../api/TransactionsApi';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport './TransactionsBarChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionsBarChart = ({\n  month\n}) => {\n  _s();\n  var _data$, _data$2, _data$3, _data$4, _data$5, _data$6, _data$7, _data$8, _data$9, _data$10;\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchData = async () => {\n      console.log(\"Month parameter:\", month);\n      if (!month) {\n        console.error(\"Month is required to fetch data.\");\n        setError(\"Month is required for displaying data.\");\n        return;\n      }\n      try {\n        const monthIndex = new Date(Date.parse(month + \" 1, 2021\")).getMonth();\n        if (monthIndex === -1) {\n          throw new Error(\"Invalid month name\");\n        }\n        const chartData = await fetchBarChartData(monthIndex + 1);\n        setData(chartData);\n      } catch (error) {\n        console.error(\"Error fetching bar chart data:\", error);\n        setError(\"Error fetching data\");\n      }\n    };\n    fetchData();\n  }, [month]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }, this);\n  }\n  if (data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"No data available for \", month, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Example data formatting\n  const formattedData = [{\n    range: '0 - 100',\n    count: ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.count) || 0\n  }, {\n    range: '101 - 200',\n    count: ((_data$2 = data[1]) === null || _data$2 === void 0 ? void 0 : _data$2.count) || 0\n  }, {\n    range: '201 - 300',\n    count: ((_data$3 = data[2]) === null || _data$3 === void 0 ? void 0 : _data$3.count) || 0\n  }, {\n    range: '301 - 400',\n    count: ((_data$4 = data[3]) === null || _data$4 === void 0 ? void 0 : _data$4.count) || 0\n  }, {\n    range: '401 - 500',\n    count: ((_data$5 = data[4]) === null || _data$5 === void 0 ? void 0 : _data$5.count) || 0\n  }, {\n    range: '501 - 600',\n    count: ((_data$6 = data[5]) === null || _data$6 === void 0 ? void 0 : _data$6.count) || 0\n  }, {\n    range: '601 - 700',\n    count: ((_data$7 = data[6]) === null || _data$7 === void 0 ? void 0 : _data$7.count) || 0\n  }, {\n    range: '701 - 800',\n    count: ((_data$8 = data[7]) === null || _data$8 === void 0 ? void 0 : _data$8.count) || 0\n  }, {\n    range: '801 - 900',\n    count: ((_data$9 = data[8]) === null || _data$9 === void 0 ? void 0 : _data$9.count) || 0\n  }, {\n    range: '901 - above',\n    count: ((_data$10 = data[9]) === null || _data$10 === void 0 ? void 0 : _data$10.count) || 0\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"chart-title\",\n      children: [\"Bar Chart Stats - \", month || \"selected month\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        data: formattedData,\n        margin: {\n          top: 20,\n          right: 30,\n          left: 20,\n          bottom: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"range\",\n          interval: 0,\n          angle: -30,\n          textAnchor: \"end\",\n          height: 80 // Adjust height to provide space for rotated labels\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          ticks: [0, 20, 40, 60, 80]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"Count\",\n          fill: \"#8884d8\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n_s(TransactionsBarChart, \"nD7edIDRwNLC+/bSdKREAvtAsyY=\");\n_c = TransactionsBarChart;\nexport default TransactionsBarChart;\nvar _c;\n$RefreshReg$(_c, \"TransactionsBarChart\");","map":{"version":3,"names":["React","useEffect","useState","fetchBarChartData","BarChart","Bar","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","jsxDEV","_jsxDEV","TransactionsBarChart","month","_s","_data$","_data$2","_data$3","_data$4","_data$5","_data$6","_data$7","_data$8","_data$9","_data$10","data","setData","error","setError","fetchData","console","log","monthIndex","Date","parse","getMonth","Error","chartData","children","fileName","_jsxFileName","lineNumber","columnNumber","length","formattedData","range","count","className","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","interval","angle","textAnchor","ticks","fill","_c","$RefreshReg$"],"sources":["/home/stlt105/my-transaction-dashboard/frontend/src/components/TransactionsBarChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { fetchBarChartData } from '../api/TransactionsApi';\nimport {\n    BarChart,\n    Bar,\n    XAxis,\n    YAxis,\n    CartesianGrid,\n    Tooltip,\n    Legend,\n    ResponsiveContainer,\n} from 'recharts';\nimport './TransactionsBarChart.css';\n\nconst TransactionsBarChart = ({ month }) => {\n    const [data, setData] = useState([]);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            console.log(\"Month parameter:\", month);\n            if (!month) {\n                console.error(\"Month is required to fetch data.\");\n                setError(\"Month is required for displaying data.\");\n                return;\n            }\n\n            try {\n                const monthIndex = new Date(Date.parse(month + \" 1, 2021\")).getMonth();\n                if (monthIndex === -1) {\n                    throw new Error(\"Invalid month name\");\n                }\n\n                const chartData = await fetchBarChartData(monthIndex + 1);\n                setData(chartData);\n            } catch (error) {\n                console.error(\"Error fetching bar chart data:\", error);\n                setError(\"Error fetching data\");\n            }\n        };\n\n        fetchData();\n    }, [month]);\n\n    if (error) {\n        return <div>{error}</div>;\n    }\n\n    if (data.length === 0) {\n        return <div>No data available for {month}.</div>;\n    }\n\n    // Example data formatting\n    const formattedData = [\n        { range: '0 - 100', count: data[0]?.count || 0 },\n        { range: '101 - 200', count: data[1]?.count || 0 },\n        { range: '201 - 300', count: data[2]?.count || 0 },\n        { range: '301 - 400', count: data[3]?.count || 0 },\n        { range: '401 - 500', count: data[4]?.count || 0 },\n        { range: '501 - 600', count: data[5]?.count || 0 },\n        { range: '601 - 700', count: data[6]?.count || 0 },\n        { range: '701 - 800', count: data[7]?.count || 0 },\n        { range: '801 - 900', count: data[8]?.count || 0 },\n        { range: '901 - above', count: data[9]?.count || 0 },\n    ];\n\n    return (\n        <div className=\"chart-container\">\n            <h3 className=\"chart-title\">Bar Chart Stats - {month || \"selected month\"}</h3>\n            <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={formattedData} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis \n                        dataKey=\"range\" \n                        interval={0} \n                        angle={-30} \n                        textAnchor=\"end\" \n                        height={80} // Adjust height to provide space for rotated labels\n                    />\n                    <YAxis ticks={[0, 20, 40, 60, 80]} />\n                    <Tooltip />\n                    <Legend />\n                    <Bar dataKey=\"Count\" fill=\"#8884d8\" />\n                </BarChart>\n            </ResponsiveContainer>\n        </div>\n    );\n};\n\nexport default TransactionsBarChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}